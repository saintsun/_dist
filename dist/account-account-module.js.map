{"version":3,"sources":["webpack:///./src/shared/app-component-base.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACP;AACkC;AACF;AACnB;AACI;AACD;AACwB;AAE9B;AAIxD;IAcI,0BAAY,QAAkB;QAZ9B,2BAAsB,GAAG,2DAAS,CAAC,YAAY,CAAC,6BAA6B,CAAC;QAa1E,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,6FAAwB,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,2FAAqB,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,wEAAa,CAAC,CAAC;QAC1C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,4EAAc,CAAC,CAAC;QAC5C,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,2EAAc,CAAC,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,mGAAsB,CAAC,CAAC;QACzD,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,wDAAU,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,qEAAW,CAAC,CAAC;IACjD,CAAC;IAED,2CAA2C;IAC3C,wFAAwF;IAExF,4BAA4B;IAC5B,+BAA+B;IAC/B,QAAQ;IAER,mCAAmC;IACnC,gCAAgC;IAChC,QAAQ;IAER,mCAAmC;IACnC,uDAAuD;IACvD,IAAI;IAEJ,oCAAS,GAAT,UAAU,cAAsB;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IACrD,CAAC;IAEL,uBAAC;AAAD,CAAC","file":"account-account-module.js","sourcesContent":["import { Injector, ElementRef } from '@angular/core';\r\nimport { AppConsts } from '@shared/AppConsts';\r\nimport { PermissionCheckerService } from '@abp/auth/permission-checker.service';\r\nimport { FeatureCheckerService } from '@abp/features/feature-checker.service';\r\nimport { NotifyService } from '@abp/notify/notify.service';\r\nimport { SettingService } from '@abp/settings/setting.service';\r\nimport { MessageService } from '@abp/message/message.service';\r\nimport { AbpMultiTenancyService } from '@abp/multi-tenancy/abp-multi-tenancy.service';\r\n\r\nimport { AuthService } from '@shared/auth/auth.service';\r\n\r\ndeclare var pg: any;\r\n\r\nexport abstract class AppComponentBase {\r\n\r\n    localizationSourceName = AppConsts.localization.defaultLocalizationSourceName;\r\n\r\n    permission: PermissionCheckerService;\r\n    feature: FeatureCheckerService;\r\n    notify: NotifyService;\r\n    setting: SettingService;\r\n    message: MessageService;\r\n    multiTenancy: AbpMultiTenancyService;\r\n    elementRef: ElementRef;\r\n\r\n    authService: AuthService;\r\n\r\n    constructor(injector: Injector) {\r\n        this.permission = injector.get(PermissionCheckerService);\r\n        this.feature = injector.get(FeatureCheckerService);\r\n        this.notify = injector.get(NotifyService);\r\n        this.setting = injector.get(SettingService);\r\n        this.message = injector.get(MessageService);\r\n        this.multiTenancy = injector.get(AbpMultiTenancyService);\r\n        this.elementRef = injector.get(ElementRef);\r\n        this.authService = injector.get(AuthService);\r\n    }\r\n\r\n    // l(key: string, ...args: any[]): string {\r\n    //     let localizedText = this.localization.localize(key, this.localizationSourceName);\r\n\r\n    //     if (!localizedText) {\r\n    //         localizedText = key;\r\n    //     }\r\n\r\n    //     if (!args || !args.length) {\r\n    //         return localizedText;\r\n    //     }\r\n\r\n    //     args.unshift(localizedText);\r\n    //     return abp.utils.formatString.apply(this, args);\r\n    // }\r\n\r\n    isGranted(permissionName: string): boolean {\r\n        return this.permission.isGranted(permissionName);\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}